<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#
var routePrefix = String.Empty;
if (!String.IsNullOrWhiteSpace(AreaName)) {
    routePrefix = "/" + AreaName;
}
routePrefix += "/" + ControllerRootName + "/";
#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Boolean" name="IsOverpostingProtectionRequired" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name ="OverpostingWarningMessage" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>


namespace <#= Namespace #>
{
	using System;
	using System.Collections.Generic;
	using System.Data;
	using System.Data.Entity;
	using System.Linq;
<# if (UseAsync) { #>
	using System.Threading.Tasks;
<# } #>
	using System.Net;
	using System.Web;
	using System.Web.Mvc;
	
	using Catel.Logging;
	
	using Repositories;

<# foreach (var namespaceName in RequiredNamespaces) { #>
	using <#= namespaceName #>;
<# } #>
<#
    var contextTypeName = ContextTypeName;
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVariable = entitySetName.ToLowerInvariant();
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = ModelVariable[0];
    var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);
	var repoVar = entitySetVariable + "Repo";
	var GetRepo = "var " + repoVar + " = uow.GetRepository<I" + ModelTypeName + "Repository>();";
	var UsingUoW = "using(var uow = new UoW()){";
    string bindAttribute;
    if (IsOverpostingProtectionRequired)
    {
        bindAttribute = String.Format("[Bind(Include=\"{0}\")] ", BindAttributeIncludeText);
    }
    else
    {
        bindAttribute = String.Empty;
    }
	var includeExpressions = "";
	includeExpressions = String.Join("", relatedProperties.Values.Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.AssociationPropertyName)));
#>
	//This controller template is created by Crabbé Maxim
	//This is a modified controller template that uses the Unit of Work pattern with the help
	//of Catel.Core and Catel.Extensions.EntityFramework
	//For more info about Catel visit http://www.catelproject.com
    public class <#= ControllerName #> : Controller
    {
        private static readonly ILog Log = LogManager.GetCurrentClassLogger();
		
        // GET: <#= routePrefix #>
        public ActionResult Index()
        {
			Log.Debug("GET/Index");
			<#= UsingUoW #>
				<#= GetRepo #>
				var <#= entitySetVariable #> = <#= repoVar #>.GetQuery()<#= includeExpressions #>.ToList();
				return View(<#= entitySetVariable #>);
			}
        }

        // GET: <#= routePrefix #>Details/5
        public ActionResult Details(<#= primaryKeyNullableTypeName #> id)
        {
			Log.Debug("GET/Details id: {0}", id.ToString());
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#= ModelTypeName #> <#= ModelVariable #> = null;
			<#= UsingUoW #>
				<#= GetRepo #>
				<#= ModelVariable #> = <#= repoVar #>.GetByKey((<#= primaryKeyType #>)id);
			}
            if (<#= ModelVariable #> == null)
            {
                return HttpNotFound();
            }
            return View(<#= ModelVariable #>);
        }

        // GET: <#= routePrefix #>Create
        public ActionResult Create()
        {
			Log.Debug("GET/Create");
<# if(relatedProperties.Values.Count != 0){#>
			<#= UsingUoW #>
<# } #>
<# foreach (var property in relatedProperties.Values) { #>
				ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(uow.<#= property.EntitySetName #>.GetAll().ToList(), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>");
<# } #>
<# if(relatedProperties.Values.Count != 0){#>
			}
<# } #>
            return View();
        }

        // POST: <#= routePrefix #>Create
<# if (IsOverpostingProtectionRequired) {
    foreach (var line in OverpostingWarningMessage.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)) { 
#>
        // <#= line #>
<# } } #>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>)
        {
			Log.Debug("POST/Create");
            if (ModelState.IsValid)
            {
<# if(!String.IsNullOrEmpty(primaryKeyType) && String.Equals("System.Guid", primaryKeyType, StringComparison.OrdinalIgnoreCase)) { #>
                <#= ModelVariable #>.<#= primaryKeyName #> = Guid.NewGuid();
<# } #>
				<#= UsingUoW #>
					<#= GetRepo #>
					<#= repoVar #>.Add(<#= ModelVariable #>);
					uow.SaveChanges();
				}
                return RedirectToAction("Index");
            }

<# if(relatedProperties.Values.Count != 0){#>
			<#= UsingUoW #>
<# } #>
<# foreach (var property in relatedProperties.Values) { #>
				ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(uow.<#= property.EntitySetName #>.GetAll().ToList(), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>");
<# } #>
<# if(relatedProperties.Values.Count != 0){#>
			}
<# } #>
            return View(<#= ModelVariable #>);
        }

        // GET: <#= routePrefix #>Edit/5
        public ActionResult Edit(<#= primaryKeyNullableTypeName #> id)
        {
			Log.Debug("GET/Edit id:{0}", id.ToString());
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#= ModelTypeName #> <#= ModelVariable #> = null;
			<#= UsingUoW #>
				<#= GetRepo #>
				<#= ModelVariable #> = <#= repoVar #>.GetByKey((<#= primaryKeyType #>)id);
			}
            if (<#= ModelVariable #> == null)
            {
                return HttpNotFound();
            }
<# if(relatedProperties.Values.Count != 0){#>
			<#= UsingUoW #>
<# } #>
<# foreach (var property in relatedProperties.Values) { #>
				ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(uow.<#= property.EntitySetName #>.GetAll().ToList(), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>");
<# } #>
<# if(relatedProperties.Values.Count != 0){#>
			}
<# } #>
            return View(<#= ModelVariable #>);
        }

        // POST: <#= routePrefix #>Edit/5
<# if (IsOverpostingProtectionRequired) {
    foreach (var line in OverpostingWarningMessage.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)) { 
#>
        // <#= line #>
<# } } #>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>)
        {
			Log.Debug("POST/Edit");
            if (ModelState.IsValid)
            {
				<#= UsingUoW #>
					<#= GetRepo #>
					
					<#= repoVar #>.Update(<#= ModelVariable #>);
					uow.SaveChanges();
				}
			}	
<# if(relatedProperties.Values.Count != 0){#>
			<#= UsingUoW #>
<# } #>
<# foreach (var property in relatedProperties.Values) { #>
				ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(uow.<#= property.EntitySetName #>.GetAll().ToList(), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>");
<# } #>
<# if(relatedProperties.Values.Count != 0){#>
			}
<# } #>
            return View(<#= ModelVariable #>);
        }

        // GET: <#= routePrefix #>Delete/5
        public ActionResult Delete(<#= primaryKeyNullableTypeName #> id)
        {
		Log.Debug("GET/Delete Id:{0}, id.ToString()");
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#= ModelTypeName #> <#= ModelVariable #> = null;
			<#= UsingUoW #>
				<#= GetRepo #>
				<#= ModelVariable #> = <#= repoVar #>.GetByKey((<#= primaryKeyType #>)id);
			}
            if (<#= ModelVariable #> == null)
            {
                return HttpNotFound();
            }
            return View(<#= ModelVariable #>);
        }

        // POST: <#= routePrefix #>Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(<#= primaryKeyShortTypeName #> id)
        {
			Log.Debug("POST/DeleteConfirmed Id:{0}", id.ToString());
			<#= UsingUoW #>
				<#= GetRepo #>
				var <#= ModelVariable #> = <#= repoVar #>.GetByKey((<#= primaryKeyType #>)id);
				<#= repoVar #>.Delete(<#= ModelVariable #>);
				uow.SaveChanges();
			}
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            //UoW dispose ofzo?
            base.Dispose(disposing);
        }
    }
}
<#+
// This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
// sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (primaryKeyType.IsPrimitive || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
#>